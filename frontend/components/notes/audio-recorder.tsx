"use client"

import { useState, useRef, useCallback, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Progress } from "@/components/ui/progress"
import { Mic, Square, FileAudio, AlertCircle, Settings } from "lucide-react"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { 
  GetAudioDevices, 
  CheckAudioPermissions, 
  RequestAudioPermission,
  StartAudioRecording,
  StopAudioRecording,
  IsAudioRecording
} from "@/wailsjs/go/main/App"

interface AudioRecorderProps {
  onRecordingComplete: (metadata: RecordingMetadata) => void
  isProcessing?: boolean
}

interface RecordingMetadata {
  courseId: string
  duration: number
  timestamp: Date
  filePath: string
  sampleRate: number
  channels: number
  format: string
}

const courses = [
  { value: "cs-201", label: "CS 201 - Data Structures" },
  { value: "math-301", label: "MATH 301 - Calculus III" },
  { value: "ai-401", label: "AI 401 - Artificial Intelligence" },
  { value: "eng-102", label: "ENG 102 - English Composition" },
]

export function AudioRecorder({ onRecordingComplete, isProcessing = false }: AudioRecorderProps) {
  const [selectedCourse, setSelectedCourse] = useState("")
  const [isRecording, setIsRecording] = useState(false)
  const [recordingTime, setRecordingTime] = useState(0)
  const [error, setError] = useState<string | null>(null)
  const [audioDevices, setAudioDevices] = useState<MediaDeviceInfo[]>([])
  const [selectedDevice, setSelectedDevice] = useState<string>("")

  const timerRef = useRef<NodeJS.Timeout | null>(null)

  // Check permissions and get available audio devices
  useEffect(() => {
    const initializeAudio = async () => {
      try {
        console.log("🔍 Initializing backend audio recording...")
        
        // Check permissions first
        const hasPermissions = await CheckAudioPermissions()
        if (!hasPermissions) {
          console.log("📱 Requesting audio permission from backend...")
          const permissionGranted = await RequestAudioPermission()
          if (!permissionGranted) {
            setError("Microphone access denied. Please allow microphone access in System Preferences.")
            return
          }
        }
        
        // Get devices from backend
        const backendDevices = await GetAudioDevices()
        console.log("🎤 Backend audio devices:", backendDevices)
        
        // Convert backend devices to MediaDeviceInfo format
        const convertedDevices = backendDevices.map((device: any) => ({
          deviceId: device.deviceId || 'default',
          label: device.label || 'Default Microphone',
          kind: device.kind || 'audioinput'
        })) as MediaDeviceInfo[]
        
        setAudioDevices(convertedDevices)
        if (convertedDevices.length > 0) {
          setSelectedDevice(convertedDevices[0].deviceId)
          console.log("✅ Backend audio device selected:", convertedDevices[0].label)
        }
        
      } catch (err: any) {
        console.error("❌ Backend audio initialization failed:", err)
        setError("Failed to initialize audio recording. Please check your system audio settings.")
      }
    }

    initializeAudio()
  }, [])

  const startRecording = useCallback(async () => {
    if (!selectedCourse) {
      setError("Please select a course.")
      return
    }

    try {
      setError(null)
      
      // Start recording using backend - title will be generated by AI
      await StartAudioRecording(selectedCourse, "")
      
      setIsRecording(true)
      setRecordingTime(0)

      // Start timer
      timerRef.current = setInterval(() => {
        setRecordingTime(prev => prev + 1)
      }, 1000)

      console.log("✅ Started recording via backend")

    } catch (err: any) {
      console.error("Recording error:", err)
      setError(`Failed to start recording: ${err.message}`)
    }
  }, [selectedCourse])

  const stopRecording = useCallback(async () => {
    if (!isRecording) {
      return
    }

    try {
      // Stop recording using backend
      const metadata = await StopAudioRecording()
      
      setIsRecording(false)
      
      if (timerRef.current) {
        clearInterval(timerRef.current)
        timerRef.current = null
      }

      if (metadata) {
        // Convert backend metadata to frontend format
        const frontendMetadata: RecordingMetadata = {
          courseId: metadata.courseId || selectedCourse,
          duration: recordingTime,
          timestamp: new Date(metadata.timestamp),
          filePath: metadata.filePath,
          sampleRate: metadata.sampleRate,
          channels: metadata.channels,
          format: metadata.format
        }
        
        onRecordingComplete(frontendMetadata)
        console.log("✅ Recording completed:", frontendMetadata)
      }

    } catch (err: any) {
      console.error("Error stopping recording:", err)
      setError("Failed to stop recording. Please try again.")
    }
  }, [isRecording, recordingTime, onRecordingComplete])

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  const isFormValid = selectedCourse && !isProcessing

  return (
    <Card className="border-0 glass">
      <CardHeader>
        <CardTitle className="flex items-center space-x-2 text-white">
          <FileAudio className="w-5 h-5 text-green-400" />
          <span>Audio Recording</span>
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="w-4 h-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* Course Selection */}
        <div>
          <label className="block mb-2 text-sm font-medium text-gray-300">Course</label>
          <Select value={selectedCourse} onValueChange={setSelectedCourse}>
            <SelectTrigger className="border-gray-600 bg-gray-800/50">
              <SelectValue placeholder="Select a course" />
            </SelectTrigger>
            <SelectContent className="border-gray-600 glass">
              {courses.map((course) => (
                <SelectItem key={course.value} value={course.value}>
                  {course.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Audio Device Selection */}
        {audioDevices.length > 1 && (
          <div>
            <label className="block mb-2 text-sm font-medium text-gray-300">Audio Input Device</label>
            <Select value={selectedDevice} onValueChange={setSelectedDevice}>
              <SelectTrigger className="border-gray-600 bg-gray-800/50">
                <SelectValue placeholder="Select audio device" />
              </SelectTrigger>
              <SelectContent className="border-gray-600 glass">
                {audioDevices.map((device) => (
                  <SelectItem key={device.deviceId} value={device.deviceId}>
                    {device.label || `Audio Input ${device.deviceId.slice(0, 8)}`}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        )}

        {/* Recording Interface */}
        <div className="space-y-4">
          {/* Recording Controls */}
          <div className="flex justify-center">
            {!isRecording ? (
              <div className="flex flex-col items-center space-y-4">
                <div className="relative">
                  <div className="flex justify-center items-center w-24 h-24 bg-gradient-to-r from-red-500 to-red-600 rounded-full shadow-lg transition-all duration-200 hover:shadow-xl hover:scale-105">
                    <Button
                      onClick={startRecording}
                      disabled={!isFormValid}
                      className="p-0 w-20 h-20 bg-transparent rounded-full border-2 border-white hover:bg-white/10"
                    >
                      <Mic className="w-8 h-8 text-white" />
                    </Button>
                  </div>
                  <div className="flex absolute -top-2 -right-2 justify-center items-center w-6 h-6 bg-green-500 rounded-full">
                    <div className="w-3 h-3 bg-white rounded-full"></div>
                  </div>
                </div>
                <div className="text-center">
                  <p className="font-medium text-gray-300">Click to Start Recording</p>
                  <p className="text-sm text-gray-400">AI will generate title and notes automatically</p>
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center space-y-4">
                <div className="relative">
                  <div className="flex justify-center items-center w-24 h-24 bg-gradient-to-r from-red-600 to-red-700 rounded-full shadow-lg animate-pulse">
                    <Button
                      onClick={stopRecording}
                      className="p-0 w-20 h-20 bg-transparent rounded-full border-2 border-white hover:bg-white/10"
                    >
                      <Square className="w-8 h-8 text-white" />
                    </Button>
                  </div>
                  <div className="flex absolute -top-2 -right-2 justify-center items-center w-6 h-6 bg-red-500 rounded-full animate-pulse">
                    <div className="w-3 h-3 bg-white rounded-full"></div>
                  </div>
                </div>
                <div className="text-center">
                  <div className="flex justify-center items-center mb-2 space-x-2">
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-bounce"></div>
                    <span className="font-mono text-lg text-red-400">{formatTime(recordingTime)}</span>
                    <div className="w-2 h-2 bg-red-500 rounded-full animate-bounce"></div>
                  </div>
                  <p className="font-medium text-gray-300">Recording in Progress</p>
                  <p className="text-sm text-gray-400">Click to stop recording</p>
                </div>
              </div>
            )}
          </div>

          {/* Recording Status */}
          {isRecording && (
            <div className="flex justify-center items-center space-x-2 text-sm text-gray-400">
              <div className="flex space-x-1">
                <div className="w-1 h-1 bg-red-400 rounded-full animate-bounce"></div>
                <div className="w-1 h-1 bg-red-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-1 h-1 bg-red-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
              <span>Recording audio...</span>
            </div>
          )}
        </div>

        {/* Processing Indicator */}
        {isProcessing && (
          <div className="space-y-2">
            <div className="flex justify-between items-center text-sm">
              <span className="text-gray-300">Processing audio...</span>
            </div>
            <Progress value={undefined} className="h-2" />
          </div>
        )}
      </CardContent>
    </Card>
  )
} 